{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/TextField/TextField.tsx","components/NewMovie/NewMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","_ref","movie","_jsxs","className","children","_jsx","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","TextField","name","value","_ref$label","label","_ref$required","required","_ref$onChange","onChange","_useState","useState","concat","Math","random","toString","slice","id","_slicedToArray","_useState3","_useState4","touched","setToched","hasError","htmlFor","classNames","type","placeholder","onBlur","INITIAL_NEW_MOVIE","NewMovie","onAdd","_useState2","count","setCount","newMovie","setNewMoview","handleChange","_ref2","target","prev","_objectSpread","_defineProperty","onSubmit","disabled","Object","values","some","v","App","moviesFromServer","setMovies","_toConsumableArray","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.eb51611b.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movie-card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\n\ntype Props = {\n  name: string,\n  value: string,\n  label?: string,\n  required?: boolean,\n  onChange?: (e: React.ChangeEvent<HTMLInputElement>) => void,\n};\n\nfunction getRandomDigits() {\n  return Math.random().toString().slice(2);\n}\n\nexport const TextField: React.FC<Props> = ({\n  name,\n  value,\n  label = name,\n  required = false,\n  onChange = () => {},\n}) => {\n  // generage a unique id once on component load\n  const [id] = useState(() => `${name}-${getRandomDigits()}`);\n\n  // To show errors only if the field was touched (onBlur)\n  const [touched, setToched] = useState(false);\n  const hasError = touched && required && !value;\n\n  return (\n    <div className=\"field\">\n      <label className=\"label\" htmlFor={id}>\n        {label}\n      </label>\n\n      <div className=\"control\">\n        <input\n          id={id}\n          data-cy={`movie-${name}`}\n          className={classNames('input', {\n            'is-danger': hasError,\n          })}\n          type=\"text\"\n          name={name}\n          placeholder={`Enter ${label}`}\n          value={value}\n          onChange={onChange}\n          onBlur={() => setToched(true)}\n        />\n      </div>\n\n      {hasError && (\n        <p className=\"help is-danger\">{`${label} is required`}</p>\n      )}\n    </div>\n  );\n};\n","import { useState } from 'react';\nimport { TextField } from '../TextField';\nimport { Movie } from '../../types/Movie';\n\nconst INITIAL_NEW_MOVIE = {\n  title: '',\n  description: '',\n  imgUrl: '',\n  imdbUrl: '',\n  imdbId: '',\n};\n\nexport const NewMovie: React.FunctionComponent<{\n  onAdd: (movie: Movie) => void\n}> = ({ onAdd }) => {\n  const [count, setCount] = useState(0);\n\n  const [newMovie, setNewMoview] = useState<Movie>(INITIAL_NEW_MOVIE);\n\n  const handleChange = (\n    { target }: React.ChangeEvent<HTMLInputElement>,\n  ) => setNewMoview(prev => ({ ...prev, [target.name]: target.value }));\n\n  const handleSubmit = () => {\n    onAdd(newMovie);\n    setNewMoview(INITIAL_NEW_MOVIE);\n    setCount(prev => prev + 1);\n  };\n\n  return (\n    <form className=\"NewMovie\" key={count} onSubmit={handleSubmit}>\n      <h2 className=\"title\">Add a movie</h2>\n\n      <TextField\n        name=\"title\"\n        label=\"Title\"\n        value={newMovie.title}\n        onChange={handleChange}\n        required\n      />\n\n      <TextField\n        name=\"description\"\n        label=\"Description\"\n        value={newMovie.description}\n        onChange={handleChange}\n      />\n\n      <TextField\n        name=\"imgUrl\"\n        label=\"Image URL\"\n        value={newMovie.imgUrl}\n        onChange={handleChange}\n      />\n\n      <TextField\n        name=\"imdbUrl\"\n        label=\"Imdb URL\"\n        value={newMovie.imdbUrl}\n        onChange={handleChange}\n      />\n\n      <TextField\n        name=\"imdbId\"\n        label=\"Imdb ID\"\n        value={newMovie.imdbId}\n        onChange={handleChange}\n\n      />\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            disabled={Object.values(newMovie).some(v => !v)}\n            data-cy=\"submit-button\"\n            className=\"button is-link\"\n          >\n            Add\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import './App.scss';\nimport { useState } from 'react';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\nimport { Movie } from './types/Movie';\n\nexport const App = () => {\n  const [movies, setMovies] = useState(moviesFromServer);\n\n  const handleAddMovie = (movie: Movie) => setMovies(prev => [...prev, movie]);\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n      <div className=\"sidebar\">\n        <NewMovie onAdd={handleAddMovie} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}